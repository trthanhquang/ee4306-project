//Vehicle 3
AddDifferentialDriveEntity    car3
	/Orientation:0    0   0
	/Position: 5.6   0    -7
	/Mass: 10
	AddLaserRangeFinderEntity    lrf_front3
		/Position:0  0.35  -0.15
		/ParentEntity:car3
		/Procedure_SensorNotify: laser_read3
	
	AddCompassEntity    compass3
		/Position:-0.1  0.15  -0.25
		/ParentEntity:car3
		/Procedure_SensorNotify: compass_read3

compassRaw3 = 0
leftAngle3 = 0
rightAngle3 = 0
leftDist3 =50000
rightDist3 = 50000


FlushScript  
Procedure car3Go(power)
{
	while(true)
	{
		call wallFollow3(0.5,power)
		wait 10
	}
}
End

Procedure wallFollow3(goalDist, basePower)
	Kh = 0.5 / 90.0;
	Kd = 0.3;
	angularMax3 = 0.07
	lateralMax3 = 0.05

	angularError3 = Util.ToInt (1000.0* leftAngle3)/1000.0
	angularOutput3 = Kh*angularError3;

	if(angularOutput3 > angularMax3)
		angularOutput3 = angularMax3
	if(angularOutput3 < (-angularMax3))
		angularOutput3 = -angularMax3
	
	lateralError3 = Util.ToInt( 1000.0 *( goalDist - leftDist3))/1000.0;
	lateralOutput3 = Kd*lateralError3

	if(lateralOutput3 > lateralMax3)
		lateralOutput3 = lateralMax3
	if(lateralOutput3 < (-lateralMax3))
		lateralOutput3 = -lateralMax3

	leftPower3 = basePower + angularOutput3 + lateralOutput3
	rightPower3 = basePower - angularOutput3 - lateralOutput3

	leftPower3 = Util.ToInt (1000.0* leftPower3) / 1000.0
	rightPower3 = Util.ToInt (1000.0* rightPower3) / 1000.0
	angularOutput3 = Util.ToInt (1000.0* angularOutput3) / 1000.0
	lateralOutput3 = Util.ToInt (1000.0* lateralOutput3) / 1000.0

//	print "(" + leftPower3 + " " + rightPower3+ ") aErr: "+ angularError3+", laErr: "+ lateralError3 + ", aOut: " + angularOutput3 + ",laOut: "+ lateralOutput3
//	print "laErr: "+ lateralError3 + ", aErr: "+ angularError3+ ", laOut: "+ lateralOutput3 + ", aOut: " + angularOutput3
	car3.Go(leftPower3, rightPower3);
End
//--------------------------------------------------------------------------------------------------//
Procedure compass_read3
	compassRaw3 = value.RawMeasurement
End
//----------------------------------------------------------------------------------------------------
Procedure laser_read3
	left1 =value.DistanceMeasurements[360] / 1000.0
	left2 =value.DistanceMeasurements[330] / 1000.0
	right1 =value.DistanceMeasurements[0] / 1000.0
	right2 =value.DistanceMeasurements[30] /1000.0
	frontDist = value.DistanceMeasurements[180] / 1000.0

	call getAngleToWall3(left1,left2)
	leftAngle3 = getAngleToWall3
	
	call getAngleToWall3(right1,right2)
	rightAngle3 = - getAngleToWall3
	
	call getDistanceToWall3(left1,left2)
	leftDist3 = getDistanceToWall3 + 0.2 * Math.Sin (leftAngle3* Math.PI /180.0)

	call getDistanceToWall3(right1,right2)
	rightDist3 = getDistanceToWall3 - 0.2 * Math.Sin (rightAngle3 * Math.PI /180.0)
End

Procedure getAngleToWall3(d1, d2)
	y3 = d2 * Math.Sin(Math.PI / 12);
	x3 = d1 - d2 * Math.Cos(Math.PI / 12);
	a3 = 90-(Math.Atan (y3/x3 )/Math.PI *180.0);
	if (a3>=90) 
		a3 = a3-180;
	return a3;
End

Procedure getDistanceToWall3(d1,d2)
	temp3 = (d1 - d2 * Math.Cos(Math.PI /12))/(d2*Math.Sin( Math.PI /12));
	return d1/ Math.Sqrt (1 + Math.Pow (temp3,2));
End